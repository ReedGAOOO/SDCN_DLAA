use cuda: True
Namespace(name='acm', k=None, lr=0.001, n_clusters=3, n_z=10, pretrain_path='data/acm.pkl', cuda=True, n_input=1870)
SDCN(
  (ae): AE(
    (enc_1): Linear(in_features=1870, out_features=500, bias=True)
    (enc_2): Linear(in_features=500, out_features=500, bias=True)
    (enc_3): Linear(in_features=500, out_features=2000, bias=True)
    (z_layer): Linear(in_features=2000, out_features=10, bias=True)
    (dec_1): Linear(in_features=10, out_features=2000, bias=True)
    (dec_2): Linear(in_features=2000, out_features=500, bias=True)
    (dec_3): Linear(in_features=500, out_features=500, bias=True)
    (x_bar_layer): Linear(in_features=500, out_features=1870, bias=True)
  )
  (gnn_1): GNNLayer()
  (gnn_2): GNNLayer()
  (gnn_3): GNNLayer()
  (gnn_4): GNNLayer()
  (gnn_5): GNNLayer()
)
Encoder Layer 1 Output Shape: torch.Size([3025, 500])
Encoder Layer 2 Output Shape: torch.Size([3025, 500])
Encoder Layer 3 Output Shape: torch.Size([3025, 2000])
Latent Space Output Shape: torch.Size([3025, 10])
Decoder Layer 1 Output Shape: torch.Size([3025, 2000])
Decoder Layer 2 Output Shape: torch.Size([3025, 500])
Decoder Layer 3 Output Shape: torch.Size([3025, 500])
Output Layer Output Shape: torch.Size([3025, 1870])
pae :acc 0.8264 , nmi 0.5003 , ari 0.5531 , f1 0.8281
Encoder Layer 1 Output Shape: torch.Size([3025, 500])
Encoder Layer 2 Output Shape: torch.Size([3025, 500])
Encoder Layer 3 Output Shape: torch.Size([3025, 2000])
Latent Space Output Shape: torch.Size([3025, 10])
Decoder Layer 1 Output Shape: torch.Size([3025, 2000])
Decoder Layer 2 Output Shape: torch.Size([3025, 500])
Decoder Layer 3 Output Shape: torch.Size([3025, 500])
Output Layer Output Shape: torch.Size([3025, 1870])
